#!/bin/python2

import urllib
import urllib2
import argparse
import urlparse
import logging
import requests
from requests.auth import HTTPBasicAuth
from oauthlib.oauth2 import BackendApplicationClient
from requests_oauthlib import OAuth2Session

from Crypto.PublicKey import RSA
from jwkest.jwk import RSAKey

# global logger
logging.basicConfig(level=logging.INFO)
l = logging.getLogger('main')


def main():
    args = parse_args()

    if args.debug:
        global l
        logging.basicConfig(level=logging.DEBUG)
        logging.getLogger("requests").setLevel(logging.DEBUG)
        l = logging.getLogger('main')

    client_id = args.user
    client_pass = args.password
    url = args.address
    keyname = args.keyname

    session = hydra_get_session(client_id, client_pass, url)
    hydra_upload_key(session, url, keyname, args.keypath[0])

def parse_args():
    parser = argparse.ArgumentParser(description='Upload (RSA) keys to Hydra.')

    parser.add_argument('keypath',
                        metavar='keypath',
                        nargs=1,
                        help='Path to the keyfile')
    parser.add_argument('-u, --user',
                        dest='user',
                        action='store',
                        required=True,
                        help="Hydra's root Client ID")
    parser.add_argument('-p, --password',
                        dest='password',
                        action='store',
                        required=True,
                        help="Hydra's root Client password")
    parser.add_argument('-a, --address',
                        dest='address',
                        action='store',
                        required=True,
                        help="Hydra's cluster URL")
    parser.add_argument('-k, --keyname',
                        dest='keyname',
                        action='store',
                        required=True,
                        help="JWK key name/URL, as defined by hydra, e.g. hydra.consent.response/public")
    parser.add_argument('-d, --debug',
                        dest='debug',
                        action='store_true',
                        default=False,
                        required=False,
                        help="Get debug dumps (esp. from the 'requests' lib)")
    args = parser.parse_args()

    return args

# get an authorized oauth2 session, i.e.
# perform the 'client credentials' oauth flow and get the token
# the returned session is able to perform api requests to hydra
def hydra_get_session(cid, csecret, url):
    l.info('getting access token')

    url = urlparse.urljoin(url, 'oauth2/token')
    client = BackendApplicationClient(client_id=cid)
    session = OAuth2Session(client=client)
    token = session.fetch_token(token_url=url, scope=['hydra.keys.get'], verify=False, client_id=cid, client_secret=csecret, state='123412341')

    l.info('getting access token ok: %s' % token['access_token'])

    return session

def hydra_upload_key(session, url, keyname, keypath):
    #get jwk from from keypat
    jwk = _pem_to_jwk(keyname, keypath)

    #create json body from jwk
    json = _hydra_make_json_body(jwk)

    l.info('trying to set hydra key')
    url = urlparse.urljoin(url, 'keys/' + keyname)
    r = session.put(url, jwk, json=json, verify=False)
    l.info('trying to set hydra key ok')

def _hydra_make_json_body(jwk):
    return {'keys':[jwk]}

def _pem_to_jwk(keyname, keypath):
    #get key content
    l.info('trying to read keyfile')
    content=''
    with open(keypath, 'r') as f:
            content = f.read()

    #parse priv or pub key
    if 'public' in keyname:
        return _pem_to_jwk_pub(content)
    else:
        return _pem_to_jwk_priv(content)

    l.info('trying to read keyfile ok')

def _pem_to_jwk_pub(content):
    pass

def _pem_to_jwk_priv(content):
    l.info('importing private key')
    privkey = RSA.importKey(content)
    jwk = RSAKey(kid="private", key=privkey)
    l.info('importing private key ok')

    #the jwk has no getitem/iteritem methods - manually rewrite it to dict
    return {'kty': jwk.kty,
            'kid': jwk.kid,
            'n': jwk.n,
            'q': jwk.q,
            'p': jwk.p,
            'd': jwk.d}

if __name__ ==  "__main__":
    main()
